{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "FastMCP 服务器基础架构实现",
        "description": "实现基于 FastMCP 2.11.3+ 的核心服务器架构，创建入口点和基础配置",
        "details": "创建 src/parallel_dev_mcp/server.py 作为 FastMCP 服务器入口，实现基础的 @mcp.tool 装饰器架构。配置 pyproject.toml 脚本入口，确保服务器可以通过 'uv run python -m src.parallel_dev_mcp.server' 启动。实现基础的错误处理和日志记录。使用 Pydantic BaseModel 进行数据验证，严格遵循类型安全要求。",
        "testStrategy": "验证服务器可以正常启动，MCP 工具正确注册，通过 uvx 方式和本地方式都能运行",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "创建 FastMCP 服务器入口文件",
            "description": "创建 src/parallel_dev_mcp/server.py 作为主要入口点，实现 FastMCP 2.11.3+ 基础架构和工具注册机制",
            "dependencies": [],
            "details": "创建 server.py 文件，导入 FastMCP 框架，初始化 FastMCP 实例。实现基础的服务器启动逻辑，包括 STDIO 和 HTTP 模式支持。添加基础的错误处理和日志配置。创建 main() 函数作为包入口点，支持 'uv run python -m src.parallel_dev_mcp.server' 启动方式。",
            "status": "done",
            "testStrategy": "测试服务器可以正常启动，验证 FastMCP 实例创建成功，确认支持 STDIO 和 HTTP 两种运行模式"
          },
          {
            "id": 2,
            "title": "实现包结构和 __init__ 文件",
            "description": "创建必要的 __init__.py 文件，建立正确的 Python 包结构，实现包级别的导入和版本管理",
            "dependencies": [
              "1.1"
            ],
            "details": "创建 src/parallel_dev_mcp/__init__.py 文件，定义包的版本信息和主要导出。实现包级别的常量定义，包括服务名称、版本号等。确保包结构符合 Python 标准，支持从外部正确导入。添加必要的类型注解和文档字符串。",
            "status": "done",
            "testStrategy": "验证包可以正确导入，测试版本信息获取，确认包结构符合 Python 标准"
          },
          {
            "id": 3,
            "title": "实现基础 MCP 工具装饰器架构",
            "description": "在 server.py 中实现第一个示例 MCP 工具，验证 @mcp.tool 装饰器功能正常工作",
            "dependencies": [
              "1.2"
            ],
            "details": "创建一个简单的测试工具函数，使用 @mcp.tool 装饰器进行注册。实现完整的类型注解，包括参数和返回值类型。添加详细的文档字符串，说明工具功能。实现基础的参数验证和错误处理。确保工具可以被 MCP 客户端正确调用。",
            "status": "done",
            "testStrategy": "测试 MCP 工具注册成功，验证工具可以通过 MCP 协议调用，确认参数验证和错误处理正常工作"
          },
          {
            "id": 4,
            "title": "配置 pyproject.toml 脚本入口",
            "description": "更新 pyproject.toml 文件，添加正确的脚本入口点配置，确保支持多种启动方式",
            "dependencies": [
              "1.3"
            ],
            "details": "更新 pyproject.toml 中的 [project.scripts] 部分，确保 parallel-dev-mcp 命令指向正确的入口函数。验证 server.py 中的 main() 函数可以作为模块入口点。测试 'uv run python -m src.parallel_dev_mcp.server' 启动方式。添加必要的依赖版本约束和开发依赖。",
            "status": "done",
            "testStrategy": "测试通过 uv 运行包的不同方式，验证脚本入口点配置正确，确认依赖关系正确解析"
          },
          {
            "id": 5,
            "title": "实现 Pydantic 数据验证和日志系统",
            "description": "集成 Pydantic BaseModel 进行数据验证，实现完整的日志记录系统，确保类型安全",
            "dependencies": [
              "1.4"
            ],
            "details": "创建基础的 Pydantic 模型类用于数据验证。实现结构化的日志配置，包括不同级别的日志输出。添加请求/响应数据的验证机制。实现错误处理和异常管理。确保所有数据交互都经过类型验证，严格禁止使用 Dict[str, Any] 和 Any 类型。",
            "status": "done",
            "testStrategy": "测试 Pydantic 模型验证功能，验证日志系统正常工作，确认类型安全要求得到满足，测试错误处理机制"
          }
        ]
      },
      {
        "id": 2,
        "title": "环境变量管理系统",
        "description": "实现 PROJECT_PREFIX、WEB_PORT、MCP_CONFIG_PATH、DANGEROUSLY_SKIP_PERMISSIONS 环境变量支持",
        "details": "创建 src/parallel_dev_mcp/_internal/config_tools.py 实现环境变量解析和验证。支持动态 claude 命令构建：基础命令 + MCP_CONFIG_PATH 参数（可选）+ DANGEROUSLY_SKIP_PERMISSIONS 参数（可选）。实现配置验证器，确保 PROJECT_PREFIX 和 WEB_PORT 必填。使用 Pydantic Settings 进行环境变量管理，提供类型安全的配置类。",
        "testStrategy": "测试不同环境变量组合下的 claude 命令构建，验证配置验证器的正确性",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "创建 Pydantic Settings 配置类",
            "description": "实现基于 Pydantic Settings 的环境变量配置管理类",
            "dependencies": [],
            "details": "在 src/parallel_dev_mcp/_internal/config_tools.py 中创建 EnvConfig 类，继承自 pydantic_settings.BaseSettings。定义四个环境变量字段：PROJECT_PREFIX（必填，str类型，用于tmux会话前缀）、WEB_PORT（必填，int类型，Flask服务端口）、MCP_CONFIG_PATH（可选，Optional[str]类型，MCP配置文件路径）、DANGEROUSLY_SKIP_PERMISSIONS（可选，bool类型，默认False）。实现字段验证器确保 PROJECT_PREFIX 不为空且只包含合法字符（字母、数字、下划线、横线），WEB_PORT 在有效端口范围内（1024-65535）。使用 model_config 设置环境变量前缀和大小写敏感性。",
            "status": "pending",
            "testStrategy": "单元测试验证各字段的类型转换、默认值、必填性验证、值范围验证"
          },
          {
            "id": 2,
            "title": "实现环境变量验证器",
            "description": "为配置类添加完整的验证逻辑和错误处理",
            "dependencies": [
              "2.1"
            ],
            "details": "在 EnvConfig 类中使用 @field_validator 装饰器为每个字段添加验证逻辑。PROJECT_PREFIX 验证器：检查非空、长度限制（1-50字符）、字符合法性（只允许字母数字下划线横线）。WEB_PORT 验证器：检查端口范围（1024-65535）、避免系统保留端口。MCP_CONFIG_PATH 验证器：如果提供则验证文件路径存在性和可读性，支持相对路径和绝对路径。DANGEROUSLY_SKIP_PERMISSIONS 验证器：确保布尔值转换正确（支持 'true'、'1'、'yes' 等字符串）。实现 ConfigValidationError 自定义异常类，提供清晰的错误消息。",
            "status": "pending",
            "testStrategy": "测试各种边界值、无效输入、错误类型的验证行为"
          },
          {
            "id": 3,
            "title": "构建 Claude 命令生成器",
            "description": "实现动态 claude 命令构建逻辑",
            "dependencies": [
              "2.1",
              "2.2"
            ],
            "details": "创建 ClaudeCommandBuilder 类，接收 EnvConfig 实例作为参数。实现 build_command() 方法：基础命令为 ['claude']，根据 MCP_CONFIG_PATH 是否存在动态添加 '--mcp-config' 参数，根据 DANGEROUSLY_SKIP_PERMISSIONS 是否为 True 添加 '--dangerously-skip-permissions' 参数。实现 build_command_string() 方法返回完整的命令字符串（用于日志和调试）。实现 build_shell_command() 方法返回适合 shell 执行的转义命令。添加命令参数顺序验证，确保参数按正确顺序排列。提供命令预览功能，支持 dry-run 模式。",
            "status": "pending",
            "testStrategy": "测试不同环境变量组合下的命令生成结果、参数顺序、转义处理"
          },
          {
            "id": 4,
            "title": "集成配置工厂和单例模式",
            "description": "实现配置的全局访问和懒加载机制",
            "dependencies": [
              "2.1",
              "2.2",
              "2.3"
            ],
            "details": "创建 ConfigFactory 类实现单例模式，确保全局只有一个配置实例。实现 get_config() 静态方法：第一次调用时从环境变量加载配置并缓存，后续调用直接返回缓存的配置实例。实现 reload_config() 方法支持配置热更新（用于测试和动态更新场景）。添加 validate_config() 方法进行完整性检查：验证必填字段存在、端口未被占用、MCP配置文件可访问。实现配置导出功能：to_dict() 方法（隐藏敏感信息）、to_json() 方法（用于调试）。添加配置变更监听器接口，支持配置变更时的回调通知。",
            "status": "pending",
            "testStrategy": "测试单例行为、懒加载、配置重载、导出功能"
          },
          {
            "id": 5,
            "title": "编写配置模块测试套件",
            "description": "创建完整的测试覆盖和文档",
            "dependencies": [
              "2.1",
              "2.2",
              "2.3",
              "2.4"
            ],
            "details": "在 tests/test_config_tools.py 创建测试文件。使用 pytest fixtures 模拟不同的环境变量组合。测试正常配置加载场景：所有必填字段提供、部分可选字段提供、最小配置集。测试异常处理：缺少必填字段、无效的端口值、不存在的MCP配置路径、无效的布尔值。测试命令生成的各种组合：只有必填参数、添加MCP配置、添加权限跳过、全部参数组合。测试配置工厂的单例行为和线程安全性。编写使用示例和集成指南文档。性能测试：配置加载时间、命令生成效率。",
            "status": "pending",
            "testStrategy": "达到95%以上代码覆盖率，包含单元测试、集成测试、性能测试"
          }
        ]
      },
      {
        "id": 3,
        "title": "Flask Web 服务实现",
        "description": "实现仅在 Master 会话中运行的 Flask 服务，提供 /msg/send 和 /msg/send-child 端点",
        "details": "创建 Flask 应用，绑定到 WEB_PORT 环境变量指定的端口。实现 POST /msg/send 端点处理 Master hooks 的 Stop/SessionEnd 事件。实现 POST /msg/send-child 端点处理子会话的 SessionEnd 事件。集成限流机制：30s 内最多 1 次请求，检测 '5-hour limit reached' 并调度延时重试。使用 tmux send-keys 向指定会话发送消息。实现请求体验证，确保包含必要的 hooks 事件字段。",
        "testStrategy": "测试两个端点的请求处理，验证限流机制，测试 tmux send-keys 命令执行",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Master 会话管理逻辑",
        "description": "实现 Master 会话的核心职责：Flask 启动、session_id.txt 绑定、Git 信息落盘、worktree 创建",
        "details": "实现 Master 会话检测逻辑，基于 tmux 会话名称判断是否为 Master。启动 Flask 服务并绑定到 WEB_PORT。创建和管理 session_id.txt 文件（仅 Master 可写入）。获取并存储 Git remote 和 branch 信息到 @mcp.resource。自动创建 ./worktree/ 目录结构。实现每 5 秒刷新子会话清单的定时任务。处理来自 /msg/send-child 的请求，更新资源状态并清理对应的子会话。",
        "testStrategy": "验证 Master 会话识别，Flask 服务启动，session_id.txt 创建，Git 信息获取，worktree 目录创建",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "实现 Master 会话检测和 Flask 服务启动逻辑",
            "description": "基于 tmux 会话名称判断是否为 Master 会话，启动 Flask 服务并绑定到 WEB_PORT",
            "dependencies": [],
            "details": "创建会话类型检测函数，检查当前 tmux 会话名称是否包含 Master 标识。实现 Flask 服务启动逻辑，绑定到环境变量 WEB_PORT 指定的端口。参考 examples/hooks/tmux_web_service.py 的 Flask 应用结构，创建基础的健康检查端点和消息处理端点。确保只有 Master 会话才启动 Flask 服务。",
            "status": "pending",
            "testStrategy": "验证 Master 会话识别准确性，测试 Flask 服务启动和端口绑定，确认非 Master 会话不启动服务"
          },
          {
            "id": 2,
            "title": "实现 session_id.txt 文件管理逻辑",
            "description": "创建和管理 session_id.txt 文件，仅 Master 会话可写入，Child 会话禁止写入",
            "dependencies": [
              "4.1"
            ],
            "details": "参考 examples/hooks/tmux_web_service.py 中的 SessionManager 类实现。创建 session_id.txt 文件的读写管理功能。实现会话绑定检查逻辑，确保只有 Master 会话可以写入 session_id。创建文件锁机制防止并发写入。实现会话验证功能，检查当前会话是否有权限操作文件。",
            "status": "pending",
            "testStrategy": "测试 session_id.txt 文件创建和写入，验证 Master 会话写入权限，确认 Child 会话写入被禁止"
          },
          {
            "id": 3,
            "title": "实现 Git 信息获取和 MCP Resource 存储",
            "description": "获取并存储 Git remote 和 branch 信息到 MCP Resource 系统",
            "dependencies": [
              "4.2"
            ],
            "details": "使用 subprocess 或 GitPython 库获取当前 Git 仓库的 remote URL 和当前分支信息。创建 Git 信息数据模型，包含 remote、branch、commit_hash 等字段。实现 MCP Resource 的数据存储功能，将 Git 信息结构化存储。创建 Git 信息刷新机制，定期更新分支和提交状态。确保信息获取的异常处理和错误恢复。",
            "status": "pending",
            "testStrategy": "验证 Git 信息获取准确性，测试 MCP Resource 存储和读取，确认数据结构完整性"
          },
          {
            "id": 4,
            "title": "实现 worktree 目录结构自动创建",
            "description": "自动创建 ./worktree/ 目录结构，为 Child 会话的 Git worktree 挂载做准备",
            "dependencies": [
              "4.3"
            ],
            "details": "检查项目根目录下是否存在 ./worktree/ 目录，如不存在则自动创建。实现 worktree 目录权限设置，确保 Child 会话可以在其中创建子目录。创建目录结构验证功能，检查 worktree 目录的可访问性。实现目录清理功能，自动清理废弃的 worktree 子目录。记录目录创建和管理操作的日志。",
            "status": "pending",
            "testStrategy": "测试 worktree 目录创建，验证目录权限设置，确认目录结构的可用性"
          },
          {
            "id": 5,
            "title": "实现子会话清单刷新和状态管理",
            "description": "实现每 5 秒刷新子会话清单的定时任务，处理 /msg/send-child 请求并管理子会话状态",
            "dependencies": [
              "4.1",
              "4.2",
              "4.3",
              "4.4"
            ],
            "details": "创建定时任务机制，每 5 秒扫描活跃的子会话并更新状态。实现 /msg/send-child 端点，处理来自子会话的 SessionEnd 事件。参考 examples/hooks/tmux_web_service.py 的端点实现模式。创建子会话状态跟踪系统，记录会话创建、运行、结束状态。实现子会话清理逻辑，自动删除已结束的 tmux 会话。集成与 MCP Resource 的状态同步机制。",
            "status": "pending",
            "testStrategy": "测试定时任务的执行频率，验证 /msg/send-child 端点功能，确认子会话状态更新和清理机制"
          }
        ]
      },
      {
        "id": 5,
        "title": "Child 会话管理逻辑",
        "description": "实现 Child 会话的创建、worktree 挂载、SessionEnd 上报和清理逻辑",
        "details": "实现 Child 会话创建：tmux new-session -d -s {PROJECT_PREFIX}_child_{taskId}。在 ./worktree/{taskId} 目录创建并挂载 Git 分支：git worktree add ./worktree/{taskId} feature/task-{taskId}。在 SessionEnd 时调用 Master 的 /msg/send-child 端点上报退出状态。禁止 Child 会话写入 session_id.txt 文件。等待 Master 会话删除对应的 tmux 会话。实现 Child 会话状态跟踪和错误处理。",
        "testStrategy": "测试 Child 会话创建，worktree 挂载，SessionEnd 上报，session_id.txt 写入禁止",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "实现 Child 会话创建和识别逻辑",
            "description": "创建 Child 会话并实现会话类型识别，支持按 taskId 命名的 tmux 会话创建",
            "dependencies": [],
            "details": "在 session_manager.py 中实现 create_child_session(project_prefix: str, task_id: str) 函数。使用命名规范 {PROJECT_PREFIX}_child_{taskId} 创建 tmux 会话：tmux new-session -d -s {session_name}。实现 is_child_session() 函数检测当前是否为 Child 会话，基于 tmux 会话名称模式匹配。添加会话状态跟踪，记录 Child 会话的创建时间、taskId 和状态。实现错误处理，包括会话名称冲突检测和 tmux 命令执行失败处理。",
            "status": "pending",
            "testStrategy": "测试 Child 会话创建成功，验证会话名称格式正确，测试会话识别逻辑，验证错误处理机制"
          },
          {
            "id": 2,
            "title": "实现 Git worktree 创建和挂载逻辑",
            "description": "为每个 Child 会话创建独立的 Git worktree，支持分支自动创建和目录管理",
            "dependencies": [
              "5.1"
            ],
            "details": "创建 worktree_manager.py 实现 Git worktree 操作。实现 create_worktree(task_id: str) 函数，在 ./worktree/{taskId} 目录创建 Git worktree。自动创建 feature/task-{taskId} 分支并切换：git worktree add ./worktree/{taskId} feature/task-{taskId}。实现分支冲突处理：如果分支已存在，使用备用命名策略。添加 worktree 状态验证，确保目录创建成功且 Git 状态正常。实现清理逻辑，支持 worktree 删除和分支清理。",
            "status": "pending",
            "testStrategy": "测试 worktree 目录创建，验证分支自动创建，测试分支冲突处理，验证 Git 状态正确"
          },
          {
            "id": 3,
            "title": "实现 Child 会话文件写入权限控制",
            "description": "禁止 Child 会话写入 session_id.txt 文件，实现文件权限控制机制",
            "dependencies": [
              "5.1"
            ],
            "details": "在 session_manager.py 中实现文件权限检查逻辑。创建 can_write_session_file() 函数，检测当前会话类型并决定是否允许写入 session_id.txt。对于 Child 会话，重定向 session_id.txt 写入操作到 /dev/null 或抛出权限错误。实现替代机制：Child 会话使用临时文件或内存存储会话信息。添加文件锁机制，防止多个 Child 会话同时尝试写入。实现权限验证日志，记录权限检查结果和拒绝原因。",
            "status": "pending",
            "testStrategy": "测试 Child 会话无法写入 session_id.txt，验证权限控制逻辑，测试文件锁机制，验证日志记录正确"
          },
          {
            "id": 4,
            "title": "实现 SessionEnd 事件上报机制",
            "description": "在 Child 会话 SessionEnd 时调用 Master 的 /msg/send-child 端点上报退出状态",
            "dependencies": [
              "5.2",
              "5.3"
            ],
            "details": "创建 child_reporter.py 实现 SessionEnd 事件上报。实现 report_session_end(task_id: str, exit_status: str) 函数，向 Master 的 /msg/send-child 端点发送 POST 请求。构造上报数据包，包含 taskId、会话状态、退出时间、worktree 路径等信息。实现网络请求重试机制，处理 Master 服务不可用的情况。添加上报状态跟踪，记录上报成功/失败状态。集成到 SessionEnd hook 处理流程，确保在会话结束时自动触发上报。",
            "status": "pending",
            "testStrategy": "测试 SessionEnd 事件触发上报，验证网络请求正确发送，测试重试机制，验证上报数据格式正确"
          },
          {
            "id": 5,
            "title": "实现 Child 会话清理和等待逻辑",
            "description": "实现 Child 会话状态跟踪，等待 Master 删除 tmux 会话，处理清理超时情况",
            "dependencies": [
              "5.4"
            ],
            "details": "在 child_manager.py 中实现会话清理等待逻辑。创建 wait_for_cleanup(task_id: str, timeout: int = 300) 函数，等待 Master 删除对应的 tmux 会话。实现会话状态轮询机制，定期检查 tmux 会话是否还存在。添加超时处理：如果等待超过指定时间，Child 会话自行退出并记录错误。实现清理状态通知，向 Master 发送清理确认消息。集成 worktree 清理：在会话结束前清理本地 worktree 状态。实现异常处理，包括网络断连、Master 服务停止等情况。",
            "status": "pending",
            "testStrategy": "测试会话清理等待逻辑，验证超时处理机制，测试状态轮询功能，验证异常处理正确"
          }
        ]
      },
      {
        "id": 6,
        "title": "Claude Code Hooks 集成",
        "description": "实现基于 web_message_sender.py 的 Claude Code hooks 配置和智能会话检测",
        "details": "修改 examples/hooks/web_message_sender.py 以支持当前 tmux 会话名称获取。实现智能会话类型检测：master/child 节点识别。配置 Stop 和 SessionStart hooks，在 Child Stop 时调用 /msg/send-child，Master Stop 时调用 /msg/send。实现 Master SessionStart 时的 session_id.txt 写入逻辑（仅当文件为空时）。集成 PROJECT_PREFIX 和 WEB_PORT 参数传递。确保 hooks 配置与 Flask 服务端点匹配。",
        "testStrategy": "测试 hooks 在不同会话类型中的触发，验证会话名称获取，测试 API 调用",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "限流与继续执行机制",
        "description": "实现 30s 频率限流和 '5-hour limit reached' 检测与自动重试机制",
        "details": "实现 30s 内最多 1 次请求的频率限流，可通过发送 'hi' 消息解决。检测 tmux 输出中的 '5-hour limit reached ∙ resets <time>' 模式。实现时间解析和调度器，在指定时间自动发送 '继续执行' 消息。实现限流状态存储和管理。集成消息发送的 10 秒延迟机制：先发送消息，10 秒后发送回车。提供限流状态查询和手动重置功能。",
        "testStrategy": "测试频率限流触发，验证时间解析和调度，测试自动重试机制",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "MCP Resources 实现",
        "description": "实现 Master 和 Child 资源的数据模型和管理逻辑",
        "details": "创建 Master 资源数据模型：包含 session_id、repo (remote/branch)、children 数组、updated_at。创建 Child 资源数据模型：包含 session_name、task_id、status、reason、transcript、last_update。实现资源的自动刷新机制：session_id 为空时每 5 秒刷新一次。实现资源的 CRUD 操作：创建、读取、更新、删除。集成资源状态与会话生命周期的同步。使用 Pydantic BaseModel 确保数据类型安全。",
        "testStrategy": "验证资源数据模型，测试 CRUD 操作，验证自动刷新机制",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "创建 Master 和 Child 资源数据模型",
            "description": "使用 Pydantic BaseModel 创建 Master 和 Child 资源的数据模型，定义完整的字段结构和验证规则",
            "dependencies": [],
            "details": "在 src/parallel_dev_mcp/session/models.py 中创建 MasterResourceModel 和 ChildResourceModel。MasterResourceModel 包含 session_id、repo (remote/branch)、children 数组、updated_at 字段。ChildResourceModel 包含 session_name、task_id、status、reason、transcript、last_update 字段。使用 Pydantic 的 Field 进行字段验证，支持 JSON 序列化和反序列化。",
            "status": "pending",
            "testStrategy": "创建单元测试验证模型字段约束、JSON 序列化和反序列化功能"
          },
          {
            "id": 2,
            "title": "实现资源管理器核心类",
            "description": "创建资源管理器类，提供 Master 和 Child 资源的统一管理接口",
            "dependencies": [
              "8.1"
            ],
            "details": "在 src/parallel_dev_mcp/session/resource_manager.py 中创建 ResourceManager 类。实现资源的内存存储和状态管理，提供添加、更新、删除、查询资源的方法。集成会话生命周期管理，确保资源状态与实际会话状态同步。使用 asyncio 支持异步操作。",
            "status": "pending",
            "testStrategy": "测试资源增删改查操作，验证状态同步机制的正确性"
          },
          {
            "id": 3,
            "title": "实现自动刷新机制",
            "description": "实现当 session_id 为空时每 5 秒自动刷新资源的后台任务",
            "dependencies": [
              "8.2"
            ],
            "details": "在 ResourceManager 中实现 auto_refresh 异步任务。当 Master 资源的 session_id 为空时，启动定时器每 5 秒刷新一次。使用 asyncio.create_task 创建后台任务，实现优雅的启动和停止机制。集成 tmux 会话检测逻辑，自动更新子会话清单。",
            "status": "pending",
            "testStrategy": "使用模拟时间测试刷新频率，验证刷新触发条件和停止机制"
          },
          {
            "id": 4,
            "title": "实现 MCP 资源集成",
            "description": "使用 FastMCP 的 @mcp.resource 装饰器集成资源到 MCP 系统",
            "dependencies": [
              "8.2"
            ],
            "details": "在 src/parallel_dev_mcp/session/mcp_resources.py 中使用 @mcp.resource 装饰器注册 Master 和 Child 资源。实现资源的动态获取和更新逻辑，支持 MCP 客户端的资源查询。集成资源管理器，确保 MCP 资源与内部状态保持一致。提供资源的 JSON 序列化输出。",
            "status": "pending",
            "testStrategy": "测试 MCP 资源注册和查询功能，验证资源数据格式的正确性"
          },
          {
            "id": 5,
            "title": "实现资源 CRUD 操作和会话生命周期集成",
            "description": "完善资源的创建、读取、更新、删除操作，并集成到会话生命周期管理中",
            "dependencies": [
              "8.3",
              "8.4"
            ],
            "details": "在 ResourceManager 中完善 create_master_resource、update_master_resource、create_child_resource、update_child_resource、remove_child_resource 等方法。集成到 Master 和 Child 会话的启动、运行、结束生命周期中。实现会话状态变化时的自动资源更新，确保资源状态与实际会话状态的一致性。添加异常处理和错误恢复机制。",
            "status": "pending",
            "testStrategy": "测试完整的会话生命周期中的资源状态变化，验证 CRUD 操作的正确性和错误处理"
          }
        ]
      },
      {
        "id": 9,
        "title": "MCP Tools 实现",
        "description": "实现 tmux 会话管理、会话管理和资源更新的 MCP 工具集",
        "details": "实现 tmux 相关工具：list_sessions（返回 {PROJECT_PREFIX}_child_* 会话）、kill_session（删除指定子会话）、send_keys（向会话输入消息）。实现会话管理工具：create_session（创建子会话+worktree+启动 Claude Code）。实现资源更新工具：update_master_resource、update_child_resource、remove_child_resource。每个工具使用 @mcp.tool 装饰器，提供完整的类型注解和文档字符串。实现错误处理和状态验证。确保工具之间的协调和数据一致性。",
        "testStrategy": "测试每个 MCP 工具的功能，验证工具间协调，测试错误处理",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "MCP Prompts 实现",
        "description": "实现 Master/Child Prompt 模板和继续执行 Prompt 系统",
        "details": "实现 Master Prompt 模板：从 master.txt 读取内容作为 Stop/SessionEnd 时的附加提示。实现 Child Prompt 模板：从 child.txt 读取内容作为子会话的默认提示。实现继续执行 Prompt：当触发限流时自动生成 'continue' 消息。集成模板文件的动态加载和缓存机制。提供模板文件的验证和错误处理。支持模板变量替换和自定义配置。",
        "testStrategy": "测试模板文件读取，验证 Prompt 生成，测试变量替换",
        "priority": "low",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "发送消息逻辑优化",
        "description": "实现先发送消息、10 秒后发送回车的两阶段消息发送机制",
        "details": "修改消息发送逻辑，实现两阶段发送：第一阶段发送实际消息内容，第二阶段在 10 秒后发送回车键。使用异步机制或定时任务实现延时发送。集成到 Flask 端点和 MCP 工具中。实现发送状态跟踪和错误恢复。提供发送日志和状态查询功能。考虑并发发送请求的处理和队列管理。",
        "testStrategy": "测试两阶段消息发送，验证延时机制，测试并发请求处理",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "系统集成测试与文档",
        "description": "完成端到端系统测试，更新文档和使用示例",
        "details": "设计并执行完整的端到端测试场景：Master 会话创建、Child 会话创建、消息通信、会话清理。测试所有环境变量组合和边界情况。验证与现有 examples/hooks/ 文件的兼容性。更新 README.md 和 CLAUDE.md 文档。创建使用示例和最佳实践指南。实现系统健康检查和诊断工具。提供故障排除指南和常见问题解答。",
        "testStrategy": "执行完整的端到端测试，验证文档准确性，测试不同使用场景",
        "priority": "medium",
        "dependencies": [
          10,
          11
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-17T15:39:57.219Z",
      "updated": "2025-09-17T15:55:56.674Z",
      "description": "Tasks for master context"
    }
  }
}